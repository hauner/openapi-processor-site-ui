{{! versions button & menu webcomponent }}

<template id="oap-versions">
  <link rel="stylesheet" href="{{{uiRootPath}}}/css/oap.css">
  <style>
  </style>
  <div class="relative">
    <button id="menu" class="py-0 px-2 rounded border border-gray-500 focus:outline-none focus:border-green-700 hover:bg-green-500 hover:text-white text-xs">
      <span id="version">?</span>
    </button>
    <button id="outside" class="fixed top-0 right-0 bottom-0 left-0 h-full w-full focus:outline-none bg-transparent hidden">&nbsp;</button>
    <div id="menu" class="absolute block text-xs bg-white rounded border overflow-hidden mt-1 shadow z-10 hidden">
      <slot></slot>
    </div>
  </div>
</template>

<template id="oap-version">
  <link rel="stylesheet" href="{{{uiRootPath}}}/css/oap.css">
  <style>
  </style>
  <a class="block px-2 py-1 text-gray-800 hover:bg-green-600 hover:text-white">
    <slot></slot>
  </a>
</template>


<script>
  customElements.define ('oap-versions', class Versions extends HTMLElement {

    constructor() {
      super()
      this.shadow = this.attachShadow({mode: 'open'})

      let template = document.getElementById('oap-versions')
      this.template = document.importNode(template.content, true)
      this.templateVersion = this.template.querySelector('span#version')
      this.templateButton = this.template.querySelector('button#menu')
      this.templateOutside = this.template.querySelector('button#outside')
      this.templateMenu = this.template.querySelector('div#menu')

      this.menuOpen = false
      this.templateButton.addEventListener('click', () => {
        this.menuOpen = !this.menuOpen
        this.updateView ()
      })

      this.templateOutside.addEventListener('click', () => {
        this.menuOpen = false
        this.updateView ()
      })
    }

    updateView () {
      if (this.menuOpen) {
        this.templateMenu.classList.remove ('hidden')
        this.templateOutside.classList.remove ('hidden')
      } else {
        this.templateMenu.classList.add ('hidden')
        this.templateOutside.classList.add ('hidden')
      }
    }

    connectedCallback () {
      this.templateVersion.innerHTML = this.current
      this.shadow.appendChild(this.template)
    }

    get current () {
      return this.getAttribute ('current')
    }

    set current (newValue) {
      this.setAttribute ('current', newValue)
    }

  })

  customElements.define ('oap-version', class Version extends HTMLElement {

    constructor() {
      super()
      this.shadow = this.attachShadow({mode: 'open'})

      let template = document.getElementById('oap-version')
      this.template = document.importNode(template.content, true)
      this.link = this.template.querySelector('a')
    }

    connectedCallback () {
      // console.log('version', this.href)
      this.link.setAttribute('href', this.href)
      this.shadow.appendChild(this.template)
    }

    get href () {
      return this.getAttribute ('href')
    }

    set href (newValue) {
      this.setAttribute ('href', newValue)
    }

  })

</script>
